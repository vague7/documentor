from __future__ import annotations

"""Knowledge search retrieval tool for the developer agent.

Exposes the RAG-powered `answer_query` helper as a LangChain tool so the
agent can directly fetch answers from the vector store instead of relying
solely on the LLM. This makes the agent documentation-aware.
"""

import os

from langchain_core.tools import tool

from app.config import logger
from app.services.query_engine import answer_query

__all__ = ["knowledge_search"]

# Sentinel env-var name that toggles the tool at runtime
_FEATURE_FLAG = "KNOWLEDGE_TOOL_ENABLED"


class ToolExecutionError(Exception):
    """Raised when the knowledge_search tool fails internally."""


@tool # type: ignore[call-arg]
def knowledge_search(question: str, session_id: str = "default") -> str:  # noqa: D401
    """Search the knowledge base and *return the answer directly*.

    Parameters
    ----------
    question : str
        The natural-language question to search for.
    session_id : str, optional
        Conversation/session identifier used for chat memory (default "default").

    Returns
    -------
    str
        The answer text generated by the RAG pipeline. If the tool is
        disabled via the ``KNOWLEDGE_TOOL_ENABLED`` env-var, a short message
        is returned instead so the agent can gracefully handle it.
    """
    enabled = os.getenv(_FEATURE_FLAG, "true").lower() in {"1", "true", "yes"}
    if not enabled:
        logger.info("knowledge_search skipped because %s is disabled", _FEATURE_FLAG)
        return "The knowledge search feature is currently disabled."

    try:
        logger.debug("knowledge_search invoked (len(question)=%d)", len(question))
        response = answer_query(question, session_id=session_id)
        return response.answer
    except Exception as exc:  # pragma: no cover â€“ generic safety net
        logger.exception("knowledge_search failed: %s", exc)
        # Re-raise with a specific error type so Gemini (or other agents)
        # can decide to handle / retry / ignore the failure.
        raise ToolExecutionError(str(exc)) from exc 